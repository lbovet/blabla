== BLABLA ==
A new Java-compatible programming language - version 1
Author: Laurent Bovet <laurent.bovet@windmaster.ch>
License: Do whatever you want with this but mention the original authors.
=== Features ===
* Mostly backwards-compatible with Java. Valid Java code is valid Blabla code! At least for the subset of features we really use (e.g. drop things like finalizers, generic wildcards)
* Object oriented
* Strongly, statically typed
* Concise
* Implementable on JVM. Code can be translated to Java source code
* Allows functional programming constructs (lambda) without making the function a first-class citizen
 
=== Driving forces ===
* As simple, concise and practical as script langugage (ref Python)
* For javaists. A progressive transition to modernity
 
=== Key Concepts ===
* Type inference
* A tuple type that can pack/unpack variable lists
* Default method on classes
 
=== Examples ===
 
* short builtin namespaces, no semicolon mandatory

 sys.println("Hello, world")


* Parentheses for statements are not mandatory

 
 if a==1 {
   sys.println("hello")
 }

 while a < 4 {
   a--
 }

 
* No distinction object/primitive types. Builtin types and classes are lowercase.
 
 int a = 2
 
* All variables are nullable

 int a = null

* Type inference initialization at declaration
 
 a = "a string"

* String are comparable with "=="

    a = "a"
    b = a + "b"
    b == "ab" // is true

* Instanciation: "new" keyword is not mandatory

 a = MyClass()  
 
* Methods: "void" keyword is not mandatory

    class A {
      myMethod(string s)
    }

 
* Constructors: parent constructors can be used without redefinition in sub-classes

  class A {
   A(boolean b) {
    ...
  }
 
 class B extends A { .. }
 
 b = B(true)


* Default values for parameters

 myMethod(string name, dept="main") { ... }  // declaration. Note that inference works also here,
                                            // type of dept is deduced
 myMethod("myself")  // call


* Named parameters

 myMethod(string name, dept="main", country="CH", code=41) { ... }  // declaration
     
 myMethod(name:"myself", code:33, country:"FR")

* Usual collections as builtin type with quick literal initialization

 list<int> a = [1, 2, 3]
 map<string, int> m = { "3": 1, "a": 3 }
 
* Array-like indexing of list and maps, "=" is defined as replacement operation

 sys.println(a[3])
 m["a"] = 5
 
* Tuple builtin type, a fixed-length list with typed elements

 tuple<int, string> t = (3, "a")

 int i = (int)t[0] // array-like subscripting returns object reference (must be casted)
 int i = t.0 // dot for static subscripting (allows only a literal integer) returns a typed reference

* Named tuples, elements are named.

 tuple<int a, string b> t = (3, "a")

 int i = (int)t[0] // dynamic index subscripting still works
 int i = (int)t.1 // static index subscripting still works
 
 int i = t.a // dot for static subscripting

 int i = t["a"] // Reflective subscripting
 
* Methods can return multiple values

 string, int myMethod() { ... }
 a, b = myMethod()

* In fact the multiple returned value is a tuple, above statement is similar to

 tuple<string int> t = myMethod()
 a, b = t  // unpacking of a tuple in separate variables

* Thus, method can have named return values (requires parentheses)

 string val, int error myMethod() { ... }
     
 if( a = myMethod() ).error == 0 {
     sys.println(a.value)
 }

* Packing of parameters into a tuple is automatic (if no ambiguity)

 myMethod(tuple<string, int> t) { ... } // declaration

 myMethod("a", 3)  // call

* The reverse is true (if no ambiguity)

 myMethod(string, int) { ... } // declaration
     
 tuple<string, int> t = "a", 2
 myMethod(t)

* Inference is also used with generics

 Collection<int> c

 c = LinkedList()       // the compiler knows that it has to instanciate a LinkedList<int>

 l = list()             // defaults to a list of "object"

* Tuple packing/unpacking works also in generics, but you have to group the parameters in separate <...> blocks to
  allow multiple tuples and avoid ambiguous matching

 class C<T> {
  T do()
 }

 c = C<int i, string s>()
 // is actually the same as
 c = C<tuple<int i, string s>>()

 sys.println(c.do().i)

* Visibility: things are public by default. private, protected, package: same behaviour as in Java.

* Properties. They are public fields with optional accessors.

 class A {
  int a  // public field with default accessors
 
  int b -> {  // getter accessor
    return b*2
  } <- {
    return b / 2   // setter accessor, not that b is the incoming value and the returned value is the one actually set
  }
 
  int c <-{} // set accessor is empty, read-only property
  int d ->{} // get accessor is empty, write-only property  
 
  abstract c ->{ return b*3 }  // property not stored, using other field. Can also be defined in interfaces.

 }
 
 // Note: In "java compatibility mode", the compiler routes a.a to a.getA() and a.setA() automatically.

* Objects can have a default method. This opens door to functional programming constructs.

 // Example with genericity
 interface CallBack<T, R> {
  R default(T param)
 }
 
 class CharSum implements CallBack<string, int>{
  default {  // Note that the default method signature is infered from the interface
    sum = 0
    for c : param.chars {
      sum += c.int     
    }
  }
 }

 // declaration
 myMethod(CallBack<string, int> callback) {
  int value = callback("hello")  
 }
 
 // call
 myMethod(CharSum())

* Anonymous classes overriding the default method

 // call myMethod with a callback created on the fly
 myMethod( CallBack() { default { return param.chars[0]  }} )    // Note that the generic parameters are infered by the method signature (when possible)

* Syntactic sugar to write the same as above when 1) Using the default constructor 2) redefining only the default method

 // equivalents to above
 myMethod( CallBack():{ return param.chars[0] } )
 myMethod( CallBack:{ return param.chars[0] } )

* Closures are realized by generalizing the above concept with tuples and using a builtin interface named "lambda"

 // builtin lambda interface (lowercase because builtin)
 interface lambda<T><R> {    // Generic parameters must be grouped to allow tuple packing/unpacking see above
   R default(T args)
 }
     
 // declaration
 myMethod( lambda<int position, string name><float, boolean> closure) {
   f, b = closure(4, "hello") // call the closure
 }
 
 // usage with indexed tuple
 myMethod( lambda:{ return args.0*0.5, args.1 == "hello" } )
 
 // usage with map-like tuple
 myMethod( lambda:{ return args.position*0.5, args.name == "hello" } )
 
* Resource management is solved the same way with a builtin class named "with" and an interface named "closable"

 // builtin "with" class
 abstract class with<T extends closable> {
  with(T t, safe=true) {          // constructor, does the actual call
    try {
      default(t) // do the work
    finally {
      try {
        t.close()
      } catch(Exception e) {
        if safe {
          throw e   // by default, throw exception when closing error
        }
      }
    }
  }
  abstract default();
 }

 // usage
 connection = datasource.connection
 with(connection):{
    // work...
 }
 
* Exceptions inheriting from "Exception" are no more checked exceptions. Methods must however declare them in throws clause.

* Hide default imports to allow copy paste of Java code containing blabla keywords

 import .-*      // This will disable the default language imports (builtin types, lambda, with, ...)
 import .lambda  // Selectively import a class from default language imports (You see that the namespace root of default language imports is "")
 import .-lambda  // Selectively hide a class from default language imports
 import .*       // Valid but not necessary, done by default

* Traits, Ã  la Scala

 trait Similarity<T> {
  abstract boolean isSimilar(T t)
  boolean isNotSimilar(T t) {
    return ! isSimilar(t)
  }
}

class Employee extends Person, Similarity<Employee> {
  string personalNo
  boolean isSimilar(Employee employee) {
    return employee.name = this.name && employee.personalNo == this.personalNo
  }
}

* Builtin class: synchronized queue. Useful for parallel programming

    q = sync<int>()  // unbounded
    q = sync<int>(5) // bounded
    q = sync([1, 2, 3], 10) // bounded, initialized with a list (generic type infered from argument).

    q.add(4)  // wait if bounded and full
    q.get()   // wait if empty

    q.wait()  // wait until it is empty

* By value copy with transitive "const" keyword. Allows for concurrent processing without shared state.

    class MyImmutableObject {

      final int a
      final string b
      MyImmutableObject(in a, string b) {
        this.a = a
        this.b = b
      }
    }

    myMethod(const RootObject param) { ... }  // declaration, enforce the parameter to be immutable, it will use a direct reference
                                                 if the object is really immutable (only final fields), clone it otherwise. This mechanism is
                                                 apply recursively for referenced objects before execution. Beware, it can copy a lot of stuff!
                                                 This is about the same idea as serialization but with cloning. We can also make the compiler
                                                 enforce the const chain with "final const" which makes thing behave a bit like C++ const!                                             

    a = const myObject   // It can also be used as operator

    anotherMethod(const myParam)

* Builtin class: parallel. Binds sync and closure to parallelize code.

    // Code as it were implemented using java platform concurency tools
    abstract class parallel {
      parallel() {
          Thread(Runnable() { run() { default() } }
      }
      parallel(sync s) {
        s.put(object())
        Thread(Runnable() { run() { default(); s.get() } }
      }
      parallel(sync s, Executor executor) {     // In the case we use
          s.put(object())
          executor.execute(Runnable() { run() { default(); s.get() } }
      }
      abstract default;
    }

    // Usage
    parallel:{
      logger.write("long information to compute...")   // Do not block current thread
    }

    // Join after treatment of all objects
    s = sync()
    for i : objectsToTreat {
       currentObject = const i   // ensures no surprise with shared state
       parallel(s):{      
          // ... treatment code applied on currentObject
       }
    }
    s.wait()

* Concurrency: other example for concurrent processing. Treating requests parallelly

    requestQueue = sync<Request>(0)  // Queue receives the requests (another threads feeds it)
                                     // It blocks immediately until get is called on it

    s = sync(10) // max number of concurrent threads
    while true {
      request = const requestQueue.get()
      parallel(s):{
          // ... Treat request
      }
    }